{"ast":null,"code":"import axios from \"axios\";\nimport shortId from \"shortid\";\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* load(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    }); //이렇게 사가에서 여러 개 액션 dispatch 호출해주면 여러 리듀서 데이터 바꿀 수 있음\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    }); //이렇게 사가에서 여러 개 액션 dispatch 호출해주면 여러 리듀서 데이터 바꿀 수 있음\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${data.postId}}/comment\", data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    console.log(\"ADDDDDDDD!!!!!!\");\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data // action.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    }); //이렇게 사가에서 여러 개 액션 dispatch 호출해주면 여러 리듀서 데이터 바꿀 수 있음\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","load","action","id","generate","type","err","console","error","response","addPost","content","addCommentAPI","addComment","log","removePost","watchLoadPosts","loadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/Sungjae jo/Documents/react/nodebird/prepare/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport shortId from \"shortid\";\r\nimport {\r\n  all,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\n\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  generateDummyPost,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* load(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n    //이렇게 사가에서 여러 개 액션 dispatch 호출해주면 여러 리듀서 데이터 바꿀 수 있음\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n    //이렇게 사가에서 여러 개 액션 dispatch 호출해주면 여러 리듀서 데이터 바꿀 수 있음\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(\"/api/post/${data.postId}}/comment\", data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    console.log(\"ADDDDDDDD!!!!!!\");\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n\r\n      // action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n    //이렇게 사가에서 여러 개 액션 dispatch 호출해주면 여러 리듀서 데이터 바꿀 수 있음\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}