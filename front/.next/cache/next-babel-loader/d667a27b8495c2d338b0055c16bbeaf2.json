{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log(\"saga logIn\"); // const result = yield call(logInAPI);\n    // call 은 동기 라서 결과값 기다린다 , fork 는 비동기라서 결과값 안받고 바로 다음꺼 실행\n\n    yield delay(1000);\n    yield put({\n      //yield 넣어두는 이유 - generator는 테스트하기가 좋음 - 하나하나씩 보면서 문제가 어딘지\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // 요 밑에 2개 이게 액션 개체인데, put은 거의 dispatch (액션을 하는) 느낌\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n} // ㄴ성공의 결과는 action.data에, 실패의 결과는 err.response.data에 저장\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000); // setTime 같은 역할 - 데이터 없으니 일단 서버 구현 전까지 효과만 줘봐자\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //yield take(\"LOG_IN_REQUEST\", logIn);\n  // ㄴ 그냥 이렇게 쓰면 딱 한번만 받고 더이상 못받음 -> while(true) 개념이 추가로 들어가줘야 한다\n  // takeEvery 써도 되긴하는데, takeLatest (클릭 실수 - 마우스 두 번 눌러진거 -> 마지막꺼만 실행 ) 이 기능 위해 이게 나음\n  //                            ㄴ 요청을 취소하는게 아니라, 응답을 취소하는거임 - 그래서 backend 단에서 검증 필요 (데이터)\n  //  ㄴ이 문제 대비하기위해 throttle 은 몇 초 내로 하나만 클릭할 수 있게 함  - 근데 이건 서버단에서 정리해줘도 됨\n  //  근데 보통은 takeLatest 씀\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n} // ㄴ take LOG_IN : LOGIN 액션 실행될 때까지 기다린다. 실행되면 logIn 실행\n// ㄴ 즉, 이벤트 리스너 같은 느낌.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\");\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","logInAPI","data","post","logIn","action","console","log","type","LOG_IN_SUCCESS","err","error","LOG_IN_FAILURE","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogIn","watchLogOut","userSaga"],"sources":["C:/Users/Sungjae jo/Documents/react/nodebird/prepare/front/sagas/user.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"saga logIn\");\r\n    // const result = yield call(logInAPI);\r\n    // call 은 동기 라서 결과값 기다린다 , fork 는 비동기라서 결과값 안받고 바로 다음꺼 실행\r\n    yield delay(1000);\r\n    yield put({\r\n      //yield 넣어두는 이유 - generator는 테스트하기가 좋음 - 하나하나씩 보면서 문제가 어딘지\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      // 요 밑에 2개 이게 액션 개체인데, put은 거의 dispatch (액션을 하는) 느낌\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n// ㄴ성공의 결과는 action.data에, 실패의 결과는 err.response.data에 저장\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000); // setTime 같은 역할 - 데이터 없으니 일단 서버 구현 전까지 효과만 줘봐자\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  //yield take(\"LOG_IN_REQUEST\", logIn);\r\n  // ㄴ 그냥 이렇게 쓰면 딱 한번만 받고 더이상 못받음 -> while(true) 개념이 추가로 들어가줘야 한다\r\n  // takeEvery 써도 되긴하는데, takeLatest (클릭 실수 - 마우스 두 번 눌러진거 -> 마지막꺼만 실행 ) 이 기능 위해 이게 나음\r\n  //                            ㄴ 요청을 취소하는게 아니라, 응답을 취소하는거임 - 그래서 backend 단에서 검증 필요 (데이터)\r\n  //  ㄴ이 문제 대비하기위해 throttle 은 몇 초 내로 하나만 클릭할 수 있게 함  - 근데 이건 서버단에서 정리해줘도 됨\r\n  //  근데 보통은 takeLatest 씀\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n// ㄴ take LOG_IN : LOGIN 액션 실행될 때까지 기다린다. 실행되면 logIn 실행\r\n// ㄴ 즉, 이벤트 리스너 같은 느낌.\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\");\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EACtB,OAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;EACtB,IAAI;IACFC,OAAO,CAACC,GAAR,CAAY,YAAZ,EADE,CAEF;IACA;;IACA,MAAMX,KAAK,CAAC,IAAD,CAAX;IACA,MAAME,GAAG,CAAC;MACR;MACAU,IAAI,EAAEC,cAFE;MAGRP,IAAI,EAAEG,MAAM,CAACH;IAHL,CAAD,CAAT;EAKD,CAVD,CAUE,OAAOQ,GAAP,EAAY;IACZJ,OAAO,CAACK,KAAR,CAAcD,GAAd;IACA,MAAMZ,GAAG,CAAC;MACR;MACAU,IAAI,EAAEI,cAFE;MAGRD,KAAK,EAAED,GAAG,CAACG,QAAJ,CAAaX;IAHZ,CAAD,CAAT;EAKD;AACF,C,CACD;;;AAEA,SAASY,SAAT,GAAqB;EACnB,OAAOd,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUY,MAAV,GAAmB;EACjB,IAAI;IACF;IACA,MAAMnB,KAAK,CAAC,IAAD,CAAX,CAFE,CAEiB;;IACnB,MAAME,GAAG,CAAC;MACRU,IAAI,EAAEQ;IADE,CAAD,CAAT;EAGD,CAND,CAME,OAAON,GAAP,EAAY;IACZJ,OAAO,CAACK,KAAR,CAAcD,GAAd;IACA,MAAMZ,GAAG,CAAC;MACRU,IAAI,EAAES,eADE;MAERN,KAAK,EAAED,GAAG,CAACG,QAAJ,CAAaX;IAFZ,CAAD,CAAT;EAID;AACF;;AAED,UAAUgB,UAAV,GAAuB;EACrB;EACA;EACA;EACA;EACA;EACA;EACA,MAAMnB,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACD,C,CACD;AACA;;;AAEA,UAAUe,WAAV,GAAwB;EACtB,MAAMpB,UAAU,CAAC,iBAAD,CAAhB;AACD;;AAED,eAAe,UAAUqB,QAAV,GAAqB;EAClC,MAAMzB,GAAG,CAAC,CAACE,IAAI,CAACqB,UAAD,CAAL,EAAmBrB,IAAI,CAACsB,WAAD,CAAvB,CAAD,CAAT;AACD"},"metadata":{},"sourceType":"module"}