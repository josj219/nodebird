{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nimport faker from \"faker\";\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫 번째 게시글\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(function () {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    Images: [faker.image.imageUrl()],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n}));\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    }\n  };\n}; //reducer는 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    //draft\n    //state 가 draft 로 이름 바뀐다 생각하면 됨 - 막 바뀌어도 불변성 지켜서 다음 상태로 바꿈\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        draft.removePostLoading = true;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentError = null;\n        draft.addCommentDone = false;\n        draft.addCommentLoading = true;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // action.data.content, userid, postid\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; //불변성 지킬라고 아래 코드 처럼 길게 썼는데 immer 쓰면 이렇게 간단!!!! unshift 활용\n          // 불변성 핵심 : 바뀌는거만 새로운 객체로 만들고, 나머지 객체는 참조 유지 해야한다 - 메모리 절약 가능하고자\n\n          /*\r\n          const postIndex = state.mainPosts.findIndex(\r\n            (v) => v.id === action.data.postId\r\n          );\r\n          console.log(\"@@@@@@@@@@@@@ postindex\");\r\n          console.log(postIndex);\r\n          console.log(action.data);\r\n          console.log(action.data.content);\r\n          const post = { ...state.mainPosts[postIndex] };\r\n          post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n          const mainPosts = [...state.mainPosts];\r\n          mainPosts[postIndex] = post;\r\n          return {\r\n            ...state,\r\n            mainPosts,\r\n            addCommentLoading: false,\r\n            addCommentDone: true,\r\n          };\r\n          */\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","image","imageUrl","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","removePostDone","removePostError","removePostLoading","filter","v","post","find","postId"],"sources":["C:/Users/Sungjae jo/Documents/react/nodebird/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\nimport faker from \"faker\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n      },\r\n      content: \"첫 번째 게시글\",\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n          src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"우와 개정판이 나왔군요~\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고싶어요~\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n  Array(20)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      Images: [faker.image.imageUrl()],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    }))\r\n);\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n});\r\n\r\n//reducer는 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    //draft\r\n    //state 가 draft 로 이름 바뀐다 생각하면 됨 - 막 바뀌어도 불변성 지켜서 다음 상태로 바꿈\r\n\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        draft.removePostLoading = true;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentError = null;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentLoading = true;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        // action.data.content, userid, postid\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n        //불변성 지킬라고 아래 코드 처럼 길게 썼는데 immer 쓰면 이렇게 간단!!!! unshift 활용\r\n\r\n        // 불변성 핵심 : 바뀌는거만 새로운 객체로 만들고, 나머지 객체는 참조 유지 해야한다 - 메모리 절약 가능하고자\r\n        /*\r\n        const postIndex = state.mainPosts.findIndex(\r\n          (v) => v.id === action.data.postId\r\n        );\r\n        console.log(\"@@@@@@@@@@@@@ postindex\");\r\n        console.log(postIndex);\r\n        console.log(action.data);\r\n        console.log(action.data.content);\r\n        const post = { ...state.mainPosts[postIndex] };\r\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        const mainPosts = [...state.mainPosts];\r\n        mainPosts[postIndex] = post;\r\n        return {\r\n          ...state,\r\n          mainPosts,\r\n          addCommentLoading: false,\r\n          addCommentDone: true,\r\n        };\r\n        */\r\n      }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}